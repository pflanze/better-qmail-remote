#!/usr/bin/perl -T
#
# Copyright (C) 2015 Christian Jaeger (ch at christianjaeger ch)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


use strict; use warnings; use warnings FATAL => 'uninitialized';

# find modules
use Cwd 'abs_path';
our ($mydir, $myname); BEGIN {
    my $location= (-l $0) ? abs_path ($0) : $0;
    $location=~ /(.*?)([^\/]+?)_?\z/s or die "?";
    ($mydir, $myname)=($1,$2);
}
use lib "$mydir/lib";

use detaint;

# Do this early so that repl calls in libs can run subprograms:
BEGIN { $ENV{PATH} = detaint $ENV{PATH} }


@ARGV==0 or die "$0: no arguments needed. Interactively asks";

use Chj::Backtrace;
use Chj::Util::AskChoose 'askchoose_autonum_withcanceldef';
use Spamscore qw(xcontentref perhaps_wholemail_bounce);
use DeliverMaildir qw(deliver_wholemail_maildir deliver_file_maildir);
use Chj::singlequote qw(singlequote_sh);
use Chj::xperlfunc;

#XX lib
sub possibly_singlequote_sh ($) {
    my ($str)=@_;
    if ($str=~ m{^[\w/.-]+\z}) {
	$str
    } else {
	singlequote_sh $str
    }
}

sub singlequote_sh_many {
    join " ", map { possibly_singlequote_sh $_ } @_
}

#/lib


my $maildir_in= '/var/qmail/Maildir_spambounce';
my $maildir_orig= '/var/qmail/Maildir_spambounce/.orig';
my $maildir_spam= '/var/qmail/Maildir_spambounce/.Spam';
my $maildir_ham= '/var/qmail/Maildir_spambounce/.Ham';

sub maildirdirs ($) {
    my ($path)=@_;
    ($path, map {"$path/$_"} qw(new cur tmp))
}
sub dirs {
    (maildirdirs $maildir_in,
     maildirdirs $maildir_orig,
     maildirdirs $maildir_spam,
     maildirdirs $maildir_ham,
     "/var/run/chj-dkim")
}
sub dirs_sh {
    singlequote_sh_many dirs
}

$> or do {
    mkdir $_, 0700 for dirs;
    die "$0: don't run me as root.

Note: the user you're going to use will need access to some
directories. Run:

 chgrp \"\$accessiblegroup\" ".dirs_sh."
 chmod g+rwx ".dirs_sh."

";
};



sub debounce {
    my ($path)=@_;
    my $rf= xcontentref $path;
    if (my ($return, $orig)= perhaps_wholemail_bounce $$rf) {
	system "less", detaint $path;
	if (my $ans= askchoose_autonum_withcanceldef ["s", "(s)kip"], "spam", "ham") {
	    my $maildir= +{
			   spam=> $maildir_spam,
			   ham=> $maildir_ham
			  }->{detaint $ans}
			    or die "??";
	    my $deliveredextract_path=
	      deliver_wholemail_maildir (detaint $orig,
					 $maildir,
					 detaint $path,
					 0644);
	    deliver_file_maildir detaint $path, $maildir_orig;
	    # use 'spam' / 'ham' also directly as the name of the tool
	    # for learning:
	    my @cmd=($ans, $deliveredextract_path);
	    warn "Running: ".singlequote_sh_many(@cmd);
	    xxsystem @cmd;
	} else {
	    warn "skipped path '$path'\n";
	}
    } else {
	die "not a bounce??(ah, allowing for that actually): $path"
    }
}

use FP::IOStream qw(xopendir_pathstream);

xxsystem "$mydir/_debounce-enable";
use Time::HiRes 'sleep'; sleep 0.8;
# XXX soooo hacky. need erlang style messaging instead man, more
# precisely, continuation (return).

for (qw(new cur tmp)) {
    xopendir_pathstream("$maildir_in/$_")->for_each (*debounce);
}

