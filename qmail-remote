#!/usr/bin/perl
#
# Copyright (C) 2007 Manuel Mausz (manuel@mausz.at)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


use strict; use warnings; use warnings FATAL => 'uninitialized';

# find modules
use Cwd 'abs_path';
our ($mydir, $myname); BEGIN {
    my $location= (-l $0) ? abs_path ($0) : $0;
    $location=~ /(.*?)([^\/]+?)_?\z/s or die "?";
    ($mydir, $myname)=($1,$2);
}
use lib "$mydir/lib";

our $VERSION = '0.2';

my $debug=1;

use Mail::DKIM 0.29;
use Mail::DKIM::Signer;
use MySignerPolicy;
use ConfigMerge qw(config_merge);
use QmailExit ":all";

# enable support for "pretty" signatures, if available
eval 'require Mail::DKIM::TextWrap';

my $configfile= '/var/qmail/control/dkim/signconf.xml';
my $maybe_debugfh= $debug && do {
    require Chj::xtmpfile;
    my $t= Chj::xtmpfile::xtmpfile ("/tmp/qmail-dkim_");
    $t->autoclean(0);
    $t
};
my $qremote= '/var/qmail/bin/qmail-remote.orig';
my $binary= 0;

our $config;

$config->{'global'} = +{
    types     => { dkim => {} },
    keyfile   => '/var/qmail/control/dkim/global.key',
    algorithm => 'rsa-sha256',
    method    => 'simple',
    selector  => 'beta',
    # either string or file (first line of file will be used)
    domain    => '/var/qmail/control/me'
};

#-------------------------------------------------------------------------------

# read config file. safely
if (defined $configfile and -r $configfile) {
    eval 'use XML::Simple; 1' and do {
	my $xmlconf;
	eval {
	    $xmlconf = XMLin($configfile,
			     ForceArray => ['types'],
			     KeyAttr => ['id']);
	    1
	} || do {
	    qexit_deferral('Unable to read config file: ', $@)
	};
	config_merge($config, $xmlconf);
    };
}

# generate signatures
my $dkim;
my $mailbuf = '';

eval {
    my $conf = $config->{'global'};
    $dkim =
	Mail::DKIM::Signer->new(
	    Policy => MySignerPolicy->new($config),
	    Debug_Canonicalization => $maybe_debugfh
	);

    if ($binary) {
	binmode STDIN;
    }

    while (<STDIN>) {
	$mailbuf .= $_;
	unless ($binary)
	{
	    chomp $_;
	    s/\015?$/\015\012/s;
	}
	$dkim->PRINT($_);
    }
    $dkim->CLOSE();

    1
} || do {
    qexit_deferral('Error while signing: ', $@)
};

$maybe_debugfh->xclose
    if defined $maybe_debugfh;

# execute qmail-remote
unshift(@ARGV, $qremote);
open(QR, '|-') || exec { $ARGV[0] } @ARGV
    or qexit_deferral('Unable to run qmail-remote: ', $!);

for my $dkim_signature ($dkim->signatures) {
    my $sig = $dkim_signature->as_string;
    $sig =~ s/\015\012\t/\012\t/g;
    print QR $sig."\012"
	or qexit_deferral ('Printing to qmail-remote: ', $!);
}

print QR $mailbuf or qexit_deferral ('Printing to qmail-remote: ', $!);

close(QR) or qexit_deferral ('Sending to qmail-remote: ', $!);

