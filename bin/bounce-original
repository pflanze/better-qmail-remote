#!/usr/bin/perl
#
# Copyright (C) 2015-2022 Christian Jaeger (ch at christianjaeger ch)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


use strict; use warnings; use warnings FATAL => 'uninitialized';

# find modules
use Cwd 'abs_path';
our ($mydir, $myname, $myorigname); BEGIN {
    $0=~ /(.*?)([^\/]+?)_?\z/s or die "?";
    ($myorigname)=($2);
    my $location= (-l $0) ? abs_path ($0) : $0;
    $location=~ /(.*?)([^\/]+?)_?\z/s or die "?";
    ($mydir, $myname)=($1,$2);
}
use lib "$mydir/../chj-perllib";
use lib "$mydir/../functional-perl/lib";
use lib "$mydir/../lib";

use Spamscore qw(xcontentref
		 perhaps_wholemail_bounce
		 perhaps_wholemail_doublebounce);
use Chj::xtmpfile;

my $continue = (($ENV{CONTINUE}//"") eq "1");

my $ctx=
  $myorigname eq "bounce-original" ?
  +{
    kindtext=> "bounce",
    extract=> \&perhaps_wholemail_bounce,
   }
  :
  $myorigname eq "doublebounce-original" ?
  +{
    kindtext=> "double bounce",
    extract=> $continue ? sub {
	my ($sref)= @_;
	my ($_ignore, $orig)= perhaps_wholemail_doublebounce($sref);
	if (my ($_ignore2, $orig2) = perhaps_wholemail_bounce($orig)) {
	    ($_ignore2, $orig2)
	} else {
	    ($_ignore, $orig)
	}
    } : \&perhaps_wholemail_doublebounce,
   }
  : die "??";


@ARGV==1 or @ARGV==2
  or die "usage: $myorigname inpath [outpath]
  strip $$ctx{kindtext} 'header' from mail at inpath.
  print to outpath or STDOUT.
  If CONTINUE=1, and called as doublebounce-original, also
  tries to unpack 1 step further (succeeds if qmail, i.e. usually
  it's us).
";

my ($inpath, $maybe_outpath)=@ARGV;


sub bounce_original {
    my ($inpath)=@_;
    my $rf= xcontentref $inpath;
    if (my ($_ignore, $orig)= $$ctx{extract}($$rf)) {
	$orig
    } else {
	die "not a ".$$ctx{kindtext}.": '$inpath'"
    }
}

my $mail= bounce_original $inpath;
if (defined $maybe_outpath) {
    my $t = xtmpfile $maybe_outpath;
    $t->xprint ($mail);
    $t->xclose;
    $t->xputback(0600);
} else {
    print STDOUT $mail
      or die "stdout: $!";
}
