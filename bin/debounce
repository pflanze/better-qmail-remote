#!/usr/bin/perl -T
#
# Copyright (C) 2015 Christian Jaeger (ch at christianjaeger ch)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


use strict; use warnings; use warnings FATAL => 'uninitialized';

# find modules
use Cwd 'abs_path';
our ($mydir, $myname); BEGIN {
    my $location= (-l $0) ? abs_path ($0) : $0;
    $location=~ /(.*?)([^\/]+?)_?\z/s or die "?";
    ($mydir, $myname)=($1,$2);
}
use lib "$mydir/../chj-perllib";
use lib "$mydir/../functional-perl/lib";
use lib "$mydir/../lib";

use detaint;

# Do this early so that repl calls in libs can run subprograms:
BEGIN { $ENV{PATH} = detaint $ENV{PATH} }


@ARGV==0 or die "$0: no arguments needed. Interactively asks";

use Chj::Backtrace;
use Chj::Util::AskChoose 'askchoose_autonum_withcanceldef';
use Spamscore qw(xcontentref perhaps_wholemail_bounce);
use DeliverMaildir qw(deliver_wholemail_maildir deliver_file_maildir);
use Chj::singlequote qw(singlequote_sh_many);
use Chj::xperlfunc ":all";
use Chj::xtmpfile;


use Spambounce_config ":maildir_path_vars";

$> or die "$0: don't run me as root.\n";

sub adapt_path_orig ($$) {
    my ($path,$addon)=@_;
    # it looks like: 1442228746.9242.servi
    $path=~ s|(/\d{8,11}\.\d+)(\.)|${1}_orig$addon$2|
      or die "match failure for path: '$path'";
    $path
}

sub xadapt_path_orig ($) {
    my ($path)=@_;
    my $p;
    for (my $i=0; $i<100; $i++) {
	$p= adapt_path_orig ($path, $i||"");
	if (not -e $p) {
	    return $p
	}
    }
    die "could not find a free path like '$p'";
}

sub process($$) {
    my ($path, $tmppath)=@_;
    xsystem "less", $tmppath;
    if (my $ans= askchoose_autonum_withcanceldef(["s", "(s)kip"],
						 "spam", "ham")) {
	my $maildir= +{
		       spam=> $maildir_spam,
		       ham=> $maildir_ham
		      }->{detaint $ans}
			or die "??";

	# deliver the extracted part:
	my $deliveredextract_path= deliver_file_maildir ($tmppath, $maildir);
	# deliver the full, unextracted mail:
	deliver_file_maildir detaint $path, $maildir_orig;

	# use 'spam' / 'ham' also directly as the name of the tool
	# for learning:
	my @cmd=($ans, $deliveredextract_path);
	warn "Running: ".singlequote_sh_many(@cmd);
	xxsystem @cmd;
    } else {
	warn "skipped path '$path'\n";
	unlink $tmppath; # or should it be left around for easy
                         # cmdline hacking?
    }
}


sub debounce {
    my ($path)=@_;
    my $rf= xcontentref $path;

    # don't overwrite the original file!:
    my $tmppath= xadapt_path_orig "$maildir_in/tmp/".detaint(basename($path));

    if (my ($return, $orig)= perhaps_wholemail_bounce $$rf) {
	my $tmp= xtmpfile $tmppath;
	$tmp->xprint ($orig);
	$tmp->xclose;
	$tmp->xputback (0644);
	process($path, $tmppath);
    } else {
	# xlink detaint $path, $tmppath;
	#  ah, ownership controls prevent this. Thus copy:
	xxsystem "cp", "-a", "--", detaint($path), $tmppath;
	process($path, $tmppath);
    }
}

use FP::IOStream qw(xopendir_pathstream);

for (qw(new cur)) { # do not check tmp, as that's for ongoing deliveries
    xopendir_pathstream("$maildir_in/$_")->for_each (*debounce);
}

